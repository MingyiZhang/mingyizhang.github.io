{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Welcome to Venathera!","text":"<p>Hi there! My name is Mingyi Zhang, a Senior Algorithm Engineer at Delivery Hero SE. </p> <p>My passion lies in the art of algorithmic problem-solving. Here, I chart my adventures and experiences in the tech realm, from groundbreaking successes to invaluable lessons learned.</p> <p>With a keen focus on developing innovative algorithmic solutions, I navigate the challenges of the tech world, always pushing boundaries. This platform offers a window into my world of algorithms, discoveries, and professional insights.</p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#java","title":"Java","text":"<ul> <li>Integrating Kotlin's Suspend Functions with Java's CompletableFuture</li> </ul>"},{"location":"tags/#kotlin","title":"Kotlin","text":"<ul> <li>Integrating Kotlin's Suspend Functions with Java's CompletableFuture</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/07/23/integrating-kotlins-suspend-functions-with-javas-completablefuture/","title":"Integrating Kotlin's Suspend Functions with Java's CompletableFuture","text":"<p>Kotlin's coroutine-based asynchronous model offers suspend functions that make asynchronous programming straightforward. However, when integrating with Java, which does not natively understand these suspend functions, one might face compatibility issues. Thankfully, we can bridge this gap by converting suspend functions into Java's <code>CompletableFuture</code>, which provides a non-blocking way to handle asynchronous operations.</p>","tags":["Java","Kotlin"]},{"location":"blog/2023/07/23/integrating-kotlins-suspend-functions-with-javas-completablefuture/#converting-suspend-functions-to-completablefuture","title":"Converting Suspend Functions to CompletableFuture","text":"<p>To facilitate this conversion, we can use the following utility function, <code>suspendToFuture</code>, which takes in an <code>Executor</code> and a suspend function, then returns a <code>CompletableFuture</code>:</p> Kotlin<pre><code>fun &lt;T&gt; suspendToFuture(\n  executor: Executor,\n  block: suspend () -&gt; T\n): CompletableFuture&lt;T&gt; {\n  val future = CompletableFuture&lt;T&gt;()\n  val dispatcher = executor.asCoroutineDispatcher()\n  CoroutineScope(dispatcher + SupervisorJob()).launch {\n    try {\n      future.complete(block())\n    } catch (e: Exception) {\n      future.completeExceptionally(e)\n    }\n  }\n  return future\n}\n</code></pre>","tags":["Java","Kotlin"]},{"location":"blog/2023/07/23/integrating-kotlins-suspend-functions-with-javas-completablefuture/#usage-example","title":"Usage Example","text":"<p>Let's take a suspend function as an example:</p> Kotlin<pre><code>suspend fun add(x: Int, y: Int): Int {\n  delay(1000)\n  return x + y  \n}\n</code></pre> <p>To use this function from Java, we first wrap it into a non-blocking function that returns a <code>CompletableFuture</code>:</p> Kotlin<pre><code>fun addAsync(\n  x: Int,\n  y: Int,\n  executor: Executor\n): CompletableFuture&lt;Int&gt; = suspendToFuture(executor) {\n  add(x, y)\n}\n</code></pre> <p>Subsequently, from Java, we can then execute this function asynchronously and handle the result:</p> Java<pre><code>final var executor = Executors.newSingleThreadExecutor();\nfinal var future = addAsync(1, 2, executor);\nfuture.thenAccept(System.out::println);\n</code></pre> <p>In the above Java code, the <code>addAsync</code> function is called, and its result (after a delay) will be printed to the console. This approach allows seamless interoperability between Kotlin's coroutine model and Java's asynchronous paradigm.</p>","tags":["Java","Kotlin"]},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#java","title":"Java","text":"<ul> <li>Integrating Kotlin's Suspend Functions with Java's CompletableFuture</li> </ul>"},{"location":"tags/#kotlin","title":"Kotlin","text":"<ul> <li>Integrating Kotlin's Suspend Functions with Java's CompletableFuture</li> </ul>"}]}